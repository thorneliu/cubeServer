// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cube.proto

#include "cube.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cube_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cube_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DictValue;
}  // namespace protobuf_cube_2eproto
namespace rec {
namespace mcube {
class DictRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DictRequest>
      _instance;
} _DictRequest_default_instance_;
class DictValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DictValue>
      _instance;
} _DictValue_default_instance_;
class DictResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DictResponse>
      _instance;
} _DictResponse_default_instance_;
}  // namespace mcube
}  // namespace rec
namespace protobuf_cube_2eproto {
static void InitDefaultsDictRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rec::mcube::_DictRequest_default_instance_;
    new (ptr) ::rec::mcube::DictRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rec::mcube::DictRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DictRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDictRequest}, {}};

static void InitDefaultsDictValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rec::mcube::_DictValue_default_instance_;
    new (ptr) ::rec::mcube::DictValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rec::mcube::DictValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DictValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDictValue}, {}};

static void InitDefaultsDictResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rec::mcube::_DictResponse_default_instance_;
    new (ptr) ::rec::mcube::DictResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rec::mcube::DictResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DictResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDictResponse}, {
      &protobuf_cube_2eproto::scc_info_DictValue.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DictRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DictValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DictResponse.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictRequest, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictRequest, version_required_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictValue, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictValue, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictResponse, values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::DictResponse, version_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::rec::mcube::DictRequest)},
  { 9, 16, sizeof(::rec::mcube::DictValue)},
  { 18, 25, sizeof(::rec::mcube::DictResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::rec::mcube::_DictRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rec::mcube::_DictValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rec::mcube::_DictResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cube.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ncube.proto\022\trec.mcube\"<\n\013DictRequest\022\014"
      "\n\004keys\030\001 \003(\004\022\037\n\020version_required\030\002 \001(\010:\005"
      "false\"*\n\tDictValue\022\016\n\006status\030\001 \002(\r\022\r\n\005va"
      "lue\030\002 \002(\014\"E\n\014DictResponse\022$\n\006values\030\001 \003("
      "\0132\024.rec.mcube.DictValue\022\017\n\007version\030\002 \001(\t"
      "2F\n\013DictService\0227\n\004seek\022\026.rec.mcube.Dict"
      "Request\032\027.rec.mcube.DictResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cube.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cube_2eproto
namespace rec {
namespace mcube {

// ===================================================================

void DictRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictRequest::kKeysFieldNumber;
const int DictRequest::kVersionRequiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictRequest::DictRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cube_2eproto::scc_info_DictRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rec.mcube.DictRequest)
}
DictRequest::DictRequest(const DictRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_required_ = from.version_required_;
  // @@protoc_insertion_point(copy_constructor:rec.mcube.DictRequest)
}

void DictRequest::SharedCtor() {
  version_required_ = false;
}

DictRequest::~DictRequest() {
  // @@protoc_insertion_point(destructor:rec.mcube.DictRequest)
  SharedDtor();
}

void DictRequest::SharedDtor() {
}

void DictRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DictRequest::descriptor() {
  ::protobuf_cube_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cube_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DictRequest& DictRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cube_2eproto::scc_info_DictRequest.base);
  return *internal_default_instance();
}


void DictRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rec.mcube.DictRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  version_required_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DictRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rec.mcube.DictRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_keys())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool version_required = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &version_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rec.mcube.DictRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rec.mcube.DictRequest)
  return false;
#undef DO_
}

void DictRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rec.mcube.DictRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->keys(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool version_required = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->version_required(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rec.mcube.DictRequest)
}

::google::protobuf::uint8* DictRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rec.mcube.DictRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 keys = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->keys_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool version_required = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->version_required(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rec.mcube.DictRequest)
  return target;
}

size_t DictRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rec.mcube.DictRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 keys = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->keys_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->keys_size());
    total_size += data_size;
  }

  // optional bool version_required = 2 [default = false];
  if (has_version_required()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DictRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rec.mcube.DictRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DictRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DictRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rec.mcube.DictRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rec.mcube.DictRequest)
    MergeFrom(*source);
  }
}

void DictRequest::MergeFrom(const DictRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rec.mcube.DictRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_version_required()) {
    set_version_required(from.version_required());
  }
}

void DictRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rec.mcube.DictRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictRequest::CopyFrom(const DictRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rec.mcube.DictRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictRequest::IsInitialized() const {
  return true;
}

void DictRequest::Swap(DictRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictRequest::InternalSwap(DictRequest* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  swap(version_required_, other->version_required_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DictRequest::GetMetadata() const {
  protobuf_cube_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cube_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DictValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictValue::kStatusFieldNumber;
const int DictValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictValue::DictValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cube_2eproto::scc_info_DictValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rec.mcube.DictValue)
}
DictValue::DictValue(const DictValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:rec.mcube.DictValue)
}

void DictValue::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
}

DictValue::~DictValue() {
  // @@protoc_insertion_point(destructor:rec.mcube.DictValue)
  SharedDtor();
}

void DictValue::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DictValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DictValue::descriptor() {
  ::protobuf_cube_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cube_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DictValue& DictValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cube_2eproto::scc_info_DictValue.base);
  return *internal_default_instance();
}


void DictValue::Clear() {
// @@protoc_insertion_point(message_clear_start:rec.mcube.DictValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DictValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rec.mcube.DictValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rec.mcube.DictValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rec.mcube.DictValue)
  return false;
#undef DO_
}

void DictValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rec.mcube.DictValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // required bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rec.mcube.DictValue)
}

::google::protobuf::uint8* DictValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rec.mcube.DictValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // required bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rec.mcube.DictValue)
  return target;
}

size_t DictValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rec.mcube.DictValue)
  size_t total_size = 0;

  if (has_value()) {
    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  if (has_status()) {
    // required uint32 status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
size_t DictValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rec.mcube.DictValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());

    // required uint32 status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DictValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rec.mcube.DictValue)
  GOOGLE_DCHECK_NE(&from, this);
  const DictValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DictValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rec.mcube.DictValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rec.mcube.DictValue)
    MergeFrom(*source);
  }
}

void DictValue::MergeFrom(const DictValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rec.mcube.DictValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DictValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rec.mcube.DictValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictValue::CopyFrom(const DictValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rec.mcube.DictValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DictValue::Swap(DictValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictValue::InternalSwap(DictValue* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DictValue::GetMetadata() const {
  protobuf_cube_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cube_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DictResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictResponse::kValuesFieldNumber;
const int DictResponse::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictResponse::DictResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cube_2eproto::scc_info_DictResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rec.mcube.DictResponse)
}
DictResponse::DictResponse(const DictResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:rec.mcube.DictResponse)
}

void DictResponse::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DictResponse::~DictResponse() {
  // @@protoc_insertion_point(destructor:rec.mcube.DictResponse)
  SharedDtor();
}

void DictResponse::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DictResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DictResponse::descriptor() {
  ::protobuf_cube_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cube_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DictResponse& DictResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cube_2eproto::scc_info_DictResponse.base);
  return *internal_default_instance();
}


void DictResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rec.mcube.DictResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    version_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DictResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rec.mcube.DictResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.mcube.DictValue values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rec.mcube.DictResponse.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rec.mcube.DictResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rec.mcube.DictResponse)
  return false;
#undef DO_
}

void DictResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rec.mcube.DictResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rec.mcube.DictValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->values(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rec.mcube.DictResponse.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rec.mcube.DictResponse)
}

::google::protobuf::uint8* DictResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rec.mcube.DictResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rec.mcube.DictValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->values(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rec.mcube.DictResponse.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rec.mcube.DictResponse)
  return target;
}

size_t DictResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rec.mcube.DictResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .rec.mcube.DictValue values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->values(static_cast<int>(i)));
    }
  }

  // optional string version = 2;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DictResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rec.mcube.DictResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DictResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DictResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rec.mcube.DictResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rec.mcube.DictResponse)
    MergeFrom(*source);
  }
}

void DictResponse::MergeFrom(const DictResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rec.mcube.DictResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_version()) {
    set_has_version();
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void DictResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rec.mcube.DictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictResponse::CopyFrom(const DictResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rec.mcube.DictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictResponse::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->values())) return false;
  return true;
}

void DictResponse::Swap(DictResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictResponse::InternalSwap(DictResponse* other) {
  using std::swap;
  CastToBase(&values_)->InternalSwap(CastToBase(&other->values_));
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DictResponse::GetMetadata() const {
  protobuf_cube_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cube_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

DictService::~DictService() {}

const ::google::protobuf::ServiceDescriptor* DictService::descriptor() {
  protobuf_cube_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cube_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* DictService::GetDescriptor() {
  return descriptor();
}

void DictService::seek(::google::protobuf::RpcController* controller,
                         const ::rec::mcube::DictRequest*,
                         ::rec::mcube::DictResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method seek() not implemented.");
  done->Run();
}

void DictService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_cube_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      seek(controller,
             ::google::protobuf::down_cast<const ::rec::mcube::DictRequest*>(request),
             ::google::protobuf::down_cast< ::rec::mcube::DictResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DictService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rec::mcube::DictRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& DictService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rec::mcube::DictResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DictService_Stub::DictService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DictService_Stub::DictService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DictService_Stub::~DictService_Stub() {
  if (owns_channel_) delete channel_;
}

void DictService_Stub::seek(::google::protobuf::RpcController* controller,
                              const ::rec::mcube::DictRequest* request,
                              ::rec::mcube::DictResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mcube
}  // namespace rec
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rec::mcube::DictRequest* Arena::CreateMaybeMessage< ::rec::mcube::DictRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rec::mcube::DictRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rec::mcube::DictValue* Arena::CreateMaybeMessage< ::rec::mcube::DictValue >(Arena* arena) {
  return Arena::CreateInternal< ::rec::mcube::DictValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rec::mcube::DictResponse* Arena::CreateMaybeMessage< ::rec::mcube::DictResponse >(Arena* arena) {
  return Arena::CreateInternal< ::rec::mcube::DictResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
