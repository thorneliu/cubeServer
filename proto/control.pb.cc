// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#include "control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace rec {
namespace mcube {
class HttpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpRequest>
      _instance;
} _HttpRequest_default_instance_;
class HttpResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpResponse>
      _instance;
} _HttpResponse_default_instance_;
}  // namespace mcube
}  // namespace rec
namespace protobuf_control_2eproto {
static void InitDefaultsHttpRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rec::mcube::_HttpRequest_default_instance_;
    new (ptr) ::rec::mcube::HttpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rec::mcube::HttpRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HttpRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHttpRequest}, {}};

static void InitDefaultsHttpResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rec::mcube::_HttpResponse_default_instance_;
    new (ptr) ::rec::mcube::HttpResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rec::mcube::HttpResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HttpResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHttpResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HttpRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HttpResponse.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::HttpRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::HttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::HttpResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rec::mcube::HttpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::rec::mcube::HttpRequest)},
  { 5, 10, sizeof(::rec::mcube::HttpResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::rec::mcube::_HttpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rec::mcube::_HttpResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "control.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rcontrol.proto\022\trec.mcube\"\r\n\013HttpReques"
      "t\"\016\n\014HttpResponse2H\n\016ControlService\0226\n\003c"
      "md\022\026.rec.mcube.HttpRequest\032\027.rec.mcube.H"
      "ttpResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_control_2eproto
namespace rec {
namespace mcube {

// ===================================================================

void HttpRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpRequest::HttpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_control_2eproto::scc_info_HttpRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rec.mcube.HttpRequest)
}
HttpRequest::HttpRequest(const HttpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rec.mcube.HttpRequest)
}

void HttpRequest::SharedCtor() {
}

HttpRequest::~HttpRequest() {
  // @@protoc_insertion_point(destructor:rec.mcube.HttpRequest)
  SharedDtor();
}

void HttpRequest::SharedDtor() {
}

void HttpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HttpRequest::descriptor() {
  ::protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpRequest& HttpRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_control_2eproto::scc_info_HttpRequest.base);
  return *internal_default_instance();
}


void HttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rec.mcube.HttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rec.mcube.HttpRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:rec.mcube.HttpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rec.mcube.HttpRequest)
  return false;
#undef DO_
}

void HttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rec.mcube.HttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rec.mcube.HttpRequest)
}

::google::protobuf::uint8* HttpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rec.mcube.HttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rec.mcube.HttpRequest)
  return target;
}

size_t HttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rec.mcube.HttpRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rec.mcube.HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rec.mcube.HttpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rec.mcube.HttpRequest)
    MergeFrom(*source);
  }
}

void HttpRequest::MergeFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rec.mcube.HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rec.mcube.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRequest::CopyFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rec.mcube.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRequest::IsInitialized() const {
  return true;
}

void HttpRequest::Swap(HttpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpRequest::InternalSwap(HttpRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HttpRequest::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HttpResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpResponse::HttpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_control_2eproto::scc_info_HttpResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rec.mcube.HttpResponse)
}
HttpResponse::HttpResponse(const HttpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rec.mcube.HttpResponse)
}

void HttpResponse::SharedCtor() {
}

HttpResponse::~HttpResponse() {
  // @@protoc_insertion_point(destructor:rec.mcube.HttpResponse)
  SharedDtor();
}

void HttpResponse::SharedDtor() {
}

void HttpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HttpResponse::descriptor() {
  ::protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpResponse& HttpResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_control_2eproto::scc_info_HttpResponse.base);
  return *internal_default_instance();
}


void HttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rec.mcube.HttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rec.mcube.HttpResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:rec.mcube.HttpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rec.mcube.HttpResponse)
  return false;
#undef DO_
}

void HttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rec.mcube.HttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rec.mcube.HttpResponse)
}

::google::protobuf::uint8* HttpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rec.mcube.HttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rec.mcube.HttpResponse)
  return target;
}

size_t HttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rec.mcube.HttpResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rec.mcube.HttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rec.mcube.HttpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rec.mcube.HttpResponse)
    MergeFrom(*source);
  }
}

void HttpResponse::MergeFrom(const HttpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rec.mcube.HttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rec.mcube.HttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpResponse::CopyFrom(const HttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rec.mcube.HttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpResponse::IsInitialized() const {
  return true;
}

void HttpResponse::Swap(HttpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpResponse::InternalSwap(HttpResponse* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HttpResponse::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ControlService::~ControlService() {}

const ::google::protobuf::ServiceDescriptor* ControlService::descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* ControlService::GetDescriptor() {
  return descriptor();
}

void ControlService::cmd(::google::protobuf::RpcController* controller,
                         const ::rec::mcube::HttpRequest*,
                         ::rec::mcube::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method cmd() not implemented.");
  done->Run();
}

void ControlService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_control_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      cmd(controller,
             ::google::protobuf::down_cast<const ::rec::mcube::HttpRequest*>(request),
             ::google::protobuf::down_cast< ::rec::mcube::HttpResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ControlService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rec::mcube::HttpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ControlService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rec::mcube::HttpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ControlService_Stub::ControlService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ControlService_Stub::ControlService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ControlService_Stub::~ControlService_Stub() {
  if (owns_channel_) delete channel_;
}

void ControlService_Stub::cmd(::google::protobuf::RpcController* controller,
                              const ::rec::mcube::HttpRequest* request,
                              ::rec::mcube::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mcube
}  // namespace rec
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rec::mcube::HttpRequest* Arena::CreateMaybeMessage< ::rec::mcube::HttpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rec::mcube::HttpRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rec::mcube::HttpResponse* Arena::CreateMaybeMessage< ::rec::mcube::HttpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::rec::mcube::HttpResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
